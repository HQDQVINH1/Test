# ====================== CHATGPT: IMPORT (TH√äM M·ªöI) ======================
try:
    from openai import OpenAI
except Exception:
    OpenAI = None  # Cho ph√©p app v·∫´n ch·∫°y n·∫øu ch∆∞a c√†i openai
# =======================================================================


# ====================== CHATGPT: H√ÄM G·ªåI API (TH√äM M·ªöI) =================
def chat_with_chatgpt(messages, model="gpt-4o-mini"):
    """
    G·ªçi ChatGPT v·ªõi danh s√°ch messages theo ƒë·ªãnh d·∫°ng OpenAI Chat API.
    messages: List[{'role': 'system'|'user'|'assistant', 'content': str}]
    """
    try:
        api_key = st.secrets.get("OPENAI_API_KEY")
        if OpenAI is None:
            return "Kh√¥ng t√¨m th·∫•y th∆∞ vi·ªán openai. Vui l√≤ng `pip install openai`."
        if not api_key:
            return "Ch∆∞a c·∫•u h√¨nh OPENAI_API_KEY trong Streamlit Secrets."

        client = OpenAI(api_key=api_key)

        resp = client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=0.2,
            max_tokens=800
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"L·ªói g·ªçi ChatGPT: {e}"
# =======================================================================


# ====================== CHATGPT: GIAO DI·ªÜN KHUNG CHAT (TH√äM M·ªöI) ========
# ƒê·∫∑t khung chat ·ªü cu·ªëi trang (sau c√°c ph·∫ßn ph√¢n t√≠ch), ho·∫∑c
# b·∫°n c√≥ th·ªÉ k√©o block n√†y l√™n tr√™n n·∫øu mu·ªën n√≥ hi·ªÉn th·ªã s·ªõm h∆°n.

st.divider()
st.subheader("üí¨ Tr√≤ chuy·ªán v·ªõi ChatGPT")

# Kh·ªüi t·∫°o l·ªãch s·ª≠ h·ªôi tho·∫°i trong session_state
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = [
        {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω t√†i ch√≠nh & d·ªØ li·ªáu, tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng."},
        {"role": "assistant", "content": "Xin ch√†o! M√¨nh l√† ChatGPT. B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ b√°o c√°o t√†i ch√≠nh ho·∫∑c d·ªØ li·ªáu?"},
    ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i (b·ªè qua message 'system' khi render)
for msg in st.session_state.chat_messages:
    if msg["role"] == "system":
        continue
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# √î nh·∫≠p li·ªáu
user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

if user_input:
    # L∆∞u message user
    st.session_state.chat_messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    # G·ªçi ChatGPT
    with st.chat_message("assistant"):
        with st.spinner("ƒêang so·∫°n tr·∫£ l·ªùi t·ª´ ChatGPT..."):
            assistant_reply = chat_with_chatgpt(st.session_state.chat_messages)
            st.markdown(assistant_reply)

    # L∆∞u message assistant
    st.session_state.chat_messages.append({"role": "assistant", "content": assistant_reply})
# =======================================================================
